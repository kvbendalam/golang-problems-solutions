Methods :

Similar to functions the only difference between functions and methods is there is receiver type in methods which won't be there functions


func getCount(count int) int{
	return count+10
}


type author struct{
	name string
	email string
}

func (a author) getAuthorDetails() {
	fmt.Printn(a.name)
	fmt.Println(a.email)
}

func main(){
	a := author{"Krishna", "Krishna@gmail.com"}
	a.getAuthorDetails()
}

package main

import "fmt"

type Employee struct {
	name  string
	email string
}

func (e Employee) getEmployeeData() {
	fmt.Println("Employee Name:", e.name)
	fmt.Println("Employee Email:", e.email)
}

func (e *Employee) updateEmail() {
	e.email = "vamsi@gmail.com"
}

func main() {
	emp := Employee{"Krishna", "krishna@gmail.com"}
	emp.getEmployeeData()
	emp.updateEmail()
	emp.getEmployeeData()
}

//Because we are passing the copy of the employee object. not the original value without pointer - so it is not updating the original value

//to update original value we need to use pointers



Interfaces:


Interface is a collection of method signatures with its return value.


type Interface_name interface{
	Area() float64
	Perimerter() float64
}


package main

import "fmt"

type Calculate interface {
	Area() float64
	Perimeter() float64
}

type Rectangle struct {
	width  float64
	height float64
}

func (r Rectangle) Area() float64 {
	return r.width * r.height
}

func (r Rectangle) Perimeter() float64 {
	return 2*r.width + 2*r.height
}

type Circle struct {
	radius float64
}

func (c Circle) Area() float64 {
	return 3.14 * c.radius * c.radius
}

func (c Circle) Perimeter() float64 {
	return 2 * 3.14 * c.radius
}

func main() {
	r := Rectangle{3.0, 4.0}
	fmt.Println(r.Area())
	fmt.Println(r.Perimeter())

	c := Circle{2.5}
	fmt.Println(c.Area())
	fmt.Println(c.Perimeter())
}
